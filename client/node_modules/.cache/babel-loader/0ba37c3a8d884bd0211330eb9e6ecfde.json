{"ast":null,"code":"'use strict';\n\nmodule.exports = exports = _package;\nexports.usage = 'Packs binary (and enclosing directory) into locally staged tarball';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar log = require('npmlog');\n\nvar versioning = require('./util/versioning.js');\n\nvar napi = require('./util/napi.js');\n\nvar existsAsync = fs.exists || path.exists;\n\nvar makeDir = require('make-dir');\n\nvar tar = require('tar');\n\nfunction readdirSync(dir) {\n  var list = [];\n  var files = fs.readdirSync(dir);\n  files.forEach(function (file) {\n    var stats = fs.lstatSync(path.join(dir, file));\n\n    if (stats.isDirectory()) {\n      list = list.concat(readdirSync(path.join(dir, file)));\n    } else {\n      list.push(path.join(dir, file));\n    }\n  });\n  return list;\n}\n\nfunction _package(gyp, argv, callback) {\n  var package_json = gyp.package_json;\n  var napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  var opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n  var from = opts.module_path;\n  var binary_module = path.join(from, opts.module_name + '.node');\n  existsAsync(binary_module, function (found) {\n    if (!found) {\n      return callback(new Error('Cannot package because ' + binary_module + ' missing: run `node-pre-gyp rebuild` first'));\n    }\n\n    var tarball = opts.staged_tarball;\n\n    var filter_func = function filter_func(entry) {\n      var basename = path.basename(entry);\n\n      if (basename.length && basename[0] !== '.') {\n        console.log('packing ' + entry);\n        return true;\n      } else {\n        console.log('skipping ' + entry);\n      }\n\n      return false;\n    };\n\n    makeDir(path.dirname(tarball)).then(function () {\n      var files = readdirSync(from);\n      var base = path.basename(from);\n      files = files.map(function (file) {\n        return path.join(base, path.relative(from, file));\n      });\n      tar.create({\n        portable: false,\n        gzip: true,\n        filter: filter_func,\n        file: tarball,\n        cwd: path.dirname(from)\n      }, files, function (err2) {\n        if (err2) console.error('[' + package_json.name + '] ' + err2.message);else log.info('package', 'Binary staged at \"' + tarball + '\"');\n        return callback(err2);\n      });\n    }).catch(function (err) {\n      return callback(err);\n    });\n  });\n}","map":{"version":3,"sources":["/Users/austenhughes/The-Baffoonery/node_modules/@mapbox/node-pre-gyp/lib/package.js"],"names":["module","exports","_package","usage","fs","require","path","log","versioning","napi","existsAsync","exists","makeDir","tar","readdirSync","dir","list","files","forEach","file","stats","lstatSync","join","isDirectory","concat","push","gyp","argv","callback","package_json","napi_build_version","get_napi_build_version_from_command_args","opts","evaluate","from","module_path","binary_module","module_name","found","Error","tarball","staged_tarball","filter_func","entry","basename","length","console","dirname","then","base","map","relative","create","portable","gzip","filter","cwd","err2","error","name","message","info","catch","err"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAGC,QAA3B;AAEAD,OAAO,CAACE,KAAR,GAAgB,oEAAhB;;AAEA,IAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,GAAG,GAAGF,OAAO,CAAC,QAAD,CAAnB;;AACA,IAAMG,UAAU,GAAGH,OAAO,CAAC,sBAAD,CAA1B;;AACA,IAAMI,IAAI,GAAGJ,OAAO,CAAC,gBAAD,CAApB;;AACA,IAAMK,WAAW,GAAGN,EAAE,CAACO,MAAH,IAAaL,IAAI,CAACK,MAAtC;;AACA,IAAMC,OAAO,GAAGP,OAAO,CAAC,UAAD,CAAvB;;AACA,IAAMQ,GAAG,GAAGR,OAAO,CAAC,KAAD,CAAnB;;AAEA,SAASS,WAAT,CAAqBC,GAArB,EAA0B;AACxB,MAAIC,IAAI,GAAG,EAAX;AACA,MAAMC,KAAK,GAAGb,EAAE,CAACU,WAAH,CAAeC,GAAf,CAAd;AAEAE,EAAAA,KAAK,CAACC,OAAN,CAAc,UAACC,IAAD,EAAU;AACtB,QAAMC,KAAK,GAAGhB,EAAE,CAACiB,SAAH,CAAaf,IAAI,CAACgB,IAAL,CAAUP,GAAV,EAAeI,IAAf,CAAb,CAAd;;AACA,QAAIC,KAAK,CAACG,WAAN,EAAJ,EAAyB;AACvBP,MAAAA,IAAI,GAAGA,IAAI,CAACQ,MAAL,CAAYV,WAAW,CAACR,IAAI,CAACgB,IAAL,CAAUP,GAAV,EAAeI,IAAf,CAAD,CAAvB,CAAP;AACD,KAFD,MAEO;AACLH,MAAAA,IAAI,CAACS,IAAL,CAAUnB,IAAI,CAACgB,IAAL,CAAUP,GAAV,EAAeI,IAAf,CAAV;AACD;AACF,GAPD;AAQA,SAAOH,IAAP;AACD;;AAED,SAASd,QAAT,CAAkBwB,GAAlB,EAAuBC,IAAvB,EAA6BC,QAA7B,EAAuC;AACrC,MAAMC,YAAY,GAAGH,GAAG,CAACG,YAAzB;AACA,MAAMC,kBAAkB,GAAGrB,IAAI,CAACsB,wCAAL,CAA8CJ,IAA9C,CAA3B;AACA,MAAMK,IAAI,GAAGxB,UAAU,CAACyB,QAAX,CAAoBJ,YAApB,EAAkCH,GAAG,CAACM,IAAtC,EAA4CF,kBAA5C,CAAb;AACA,MAAMI,IAAI,GAAGF,IAAI,CAACG,WAAlB;AACA,MAAMC,aAAa,GAAG9B,IAAI,CAACgB,IAAL,CAAUY,IAAV,EAAgBF,IAAI,CAACK,WAAL,GAAmB,OAAnC,CAAtB;AACA3B,EAAAA,WAAW,CAAC0B,aAAD,EAAgB,UAACE,KAAD,EAAW;AACpC,QAAI,CAACA,KAAL,EAAY;AACV,aAAOV,QAAQ,CAAC,IAAIW,KAAJ,CAAU,4BAA4BH,aAA5B,GAA4C,4CAAtD,CAAD,CAAf;AACD;;AACD,QAAMI,OAAO,GAAGR,IAAI,CAACS,cAArB;;AACA,QAAMC,WAAW,GAAG,SAAdA,WAAc,CAASC,KAAT,EAAgB;AAClC,UAAMC,QAAQ,GAAGtC,IAAI,CAACsC,QAAL,CAAcD,KAAd,CAAjB;;AACA,UAAIC,QAAQ,CAACC,MAAT,IAAmBD,QAAQ,CAAC,CAAD,CAAR,KAAgB,GAAvC,EAA4C;AAC1CE,QAAAA,OAAO,CAACvC,GAAR,CAAY,aAAaoC,KAAzB;AACA,eAAO,IAAP;AACD,OAHD,MAGO;AACLG,QAAAA,OAAO,CAACvC,GAAR,CAAY,cAAcoC,KAA1B;AACD;;AACD,aAAO,KAAP;AACD,KATD;;AAUA/B,IAAAA,OAAO,CAACN,IAAI,CAACyC,OAAL,CAAaP,OAAb,CAAD,CAAP,CAA+BQ,IAA/B,CAAoC,YAAM;AACxC,UAAI/B,KAAK,GAAGH,WAAW,CAACoB,IAAD,CAAvB;AACA,UAAMe,IAAI,GAAG3C,IAAI,CAACsC,QAAL,CAAcV,IAAd,CAAb;AACAjB,MAAAA,KAAK,GAAGA,KAAK,CAACiC,GAAN,CAAU,UAAC/B,IAAD,EAAU;AAC1B,eAAOb,IAAI,CAACgB,IAAL,CAAU2B,IAAV,EAAgB3C,IAAI,CAAC6C,QAAL,CAAcjB,IAAd,EAAoBf,IAApB,CAAhB,CAAP;AACD,OAFO,CAAR;AAGAN,MAAAA,GAAG,CAACuC,MAAJ,CAAW;AACTC,QAAAA,QAAQ,EAAE,KADD;AAETC,QAAAA,IAAI,EAAE,IAFG;AAGTC,QAAAA,MAAM,EAAEb,WAHC;AAITvB,QAAAA,IAAI,EAAEqB,OAJG;AAKTgB,QAAAA,GAAG,EAAElD,IAAI,CAACyC,OAAL,CAAab,IAAb;AALI,OAAX,EAMGjB,KANH,EAMU,UAACwC,IAAD,EAAU;AAClB,YAAIA,IAAJ,EAAWX,OAAO,CAACY,KAAR,CAAc,MAAM7B,YAAY,CAAC8B,IAAnB,GAA0B,IAA1B,GAAiCF,IAAI,CAACG,OAApD,EAAX,KACKrD,GAAG,CAACsD,IAAJ,CAAS,SAAT,EAAoB,uBAAuBrB,OAAvB,GAAiC,GAArD;AACL,eAAOZ,QAAQ,CAAC6B,IAAD,CAAf;AACD,OAVD;AAWD,KAjBD,EAiBGK,KAjBH,CAiBS,UAACC,GAAD,EAAS;AAChB,aAAOnC,QAAQ,CAACmC,GAAD,CAAf;AACD,KAnBD;AAoBD,GAnCU,CAAX;AAoCD","sourcesContent":["'use strict';\n\nmodule.exports = exports = _package;\n\nexports.usage = 'Packs binary (and enclosing directory) into locally staged tarball';\n\nconst fs = require('fs');\nconst path = require('path');\nconst log = require('npmlog');\nconst versioning = require('./util/versioning.js');\nconst napi = require('./util/napi.js');\nconst existsAsync = fs.exists || path.exists;\nconst makeDir = require('make-dir');\nconst tar = require('tar');\n\nfunction readdirSync(dir) {\n  let list = [];\n  const files = fs.readdirSync(dir);\n\n  files.forEach((file) => {\n    const stats = fs.lstatSync(path.join(dir, file));\n    if (stats.isDirectory()) {\n      list = list.concat(readdirSync(path.join(dir, file)));\n    } else {\n      list.push(path.join(dir, file));\n    }\n  });\n  return list;\n}\n\nfunction _package(gyp, argv, callback) {\n  const package_json = gyp.package_json;\n  const napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  const opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n  const from = opts.module_path;\n  const binary_module = path.join(from, opts.module_name + '.node');\n  existsAsync(binary_module, (found) => {\n    if (!found) {\n      return callback(new Error('Cannot package because ' + binary_module + ' missing: run `node-pre-gyp rebuild` first'));\n    }\n    const tarball = opts.staged_tarball;\n    const filter_func = function(entry) {\n      const basename = path.basename(entry);\n      if (basename.length && basename[0] !== '.') {\n        console.log('packing ' + entry);\n        return true;\n      } else {\n        console.log('skipping ' + entry);\n      }\n      return false;\n    };\n    makeDir(path.dirname(tarball)).then(() => {\n      let files = readdirSync(from);\n      const base = path.basename(from);\n      files = files.map((file) => {\n        return path.join(base, path.relative(from, file));\n      });\n      tar.create({\n        portable: false,\n        gzip: true,\n        filter: filter_func,\n        file: tarball,\n        cwd: path.dirname(from)\n      }, files, (err2) => {\n        if (err2)  console.error('[' + package_json.name + '] ' + err2.message);\n        else log.info('package', 'Binary staged at \"' + tarball + '\"');\n        return callback(err2);\n      });\n    }).catch((err) => {\n      return callback(err);\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"script"}