{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/austenhughes/The-Baffoonery/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/austenhughes/The-Baffoonery/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Header = require('./header.js');\n\nvar path = require('path');\n\nvar Pax = /*#__PURE__*/function () {\n  function Pax(obj, global) {\n    _classCallCheck(this, Pax);\n\n    this.atime = obj.atime || null;\n    this.charset = obj.charset || null;\n    this.comment = obj.comment || null;\n    this.ctime = obj.ctime || null;\n    this.gid = obj.gid || null;\n    this.gname = obj.gname || null;\n    this.linkpath = obj.linkpath || null;\n    this.mtime = obj.mtime || null;\n    this.path = obj.path || null;\n    this.size = obj.size || null;\n    this.uid = obj.uid || null;\n    this.uname = obj.uname || null;\n    this.dev = obj.dev || null;\n    this.ino = obj.ino || null;\n    this.nlink = obj.nlink || null;\n    this.global = global || false;\n  }\n\n  _createClass(Pax, [{\n    key: \"encode\",\n    value: function encode() {\n      var body = this.encodeBody();\n      if (body === '') return null;\n      var bodyLen = Buffer.byteLength(body); // round up to 512 bytes\n      // add 512 for header\n\n      var bufLen = 512 * Math.ceil(1 + bodyLen / 512);\n      var buf = Buffer.allocUnsafe(bufLen); // 0-fill the header section, it might not hit every field\n\n      for (var i = 0; i < 512; i++) {\n        buf[i] = 0;\n      }\n\n      new Header({\n        // XXX split the path\n        // then the path should be PaxHeader + basename, but less than 99,\n        // prepend with the dirname\n        path: ('PaxHeader/' + path.basename(this.path)).slice(0, 99),\n        mode: this.mode || 420,\n        uid: this.uid || null,\n        gid: this.gid || null,\n        size: bodyLen,\n        mtime: this.mtime || null,\n        type: this.global ? 'GlobalExtendedHeader' : 'ExtendedHeader',\n        linkpath: '',\n        uname: this.uname || '',\n        gname: this.gname || '',\n        devmaj: 0,\n        devmin: 0,\n        atime: this.atime || null,\n        ctime: this.ctime || null\n      }).encode(buf);\n      buf.write(body, 512, bodyLen, 'utf8'); // null pad after the body\n\n      for (var _i = bodyLen + 512; _i < buf.length; _i++) {\n        buf[_i] = 0;\n      }\n\n      return buf;\n    }\n  }, {\n    key: \"encodeBody\",\n    value: function encodeBody() {\n      return this.encodeField('path') + this.encodeField('ctime') + this.encodeField('atime') + this.encodeField('dev') + this.encodeField('ino') + this.encodeField('nlink') + this.encodeField('charset') + this.encodeField('comment') + this.encodeField('gid') + this.encodeField('gname') + this.encodeField('linkpath') + this.encodeField('mtime') + this.encodeField('size') + this.encodeField('uid') + this.encodeField('uname');\n    }\n  }, {\n    key: \"encodeField\",\n    value: function encodeField(field) {\n      if (this[field] === null || this[field] === undefined) return '';\n      var v = this[field] instanceof Date ? this[field].getTime() / 1000 : this[field];\n      var s = ' ' + (field === 'dev' || field === 'ino' || field === 'nlink' ? 'SCHILY.' : '') + field + '=' + v + '\\n';\n      var byteLen = Buffer.byteLength(s); // the digits includes the length of the digits in ascii base-10\n      // so if it's 9 characters, then adding 1 for the 9 makes it 10\n      // which makes it 11 chars.\n\n      var digits = Math.floor(Math.log(byteLen) / Math.log(10)) + 1;\n      if (byteLen + digits >= Math.pow(10, digits)) digits += 1;\n      var len = digits + byteLen;\n      return len + s;\n    }\n  }]);\n\n  return Pax;\n}();\n\nPax.parse = function (string, ex, g) {\n  return new Pax(merge(parseKV(string), ex), g);\n};\n\nvar merge = function merge(a, b) {\n  return b ? Object.keys(a).reduce(function (s, k) {\n    return s[k] = a[k], s;\n  }, b) : a;\n};\n\nvar parseKV = function parseKV(string) {\n  return string.replace(/\\n$/, '').split('\\n').reduce(parseKVLine, Object.create(null));\n};\n\nvar parseKVLine = function parseKVLine(set, line) {\n  var n = parseInt(line, 10); // XXX Values with \\n in them will fail this.\n  // Refactor to not be a naive line-by-line parse.\n\n  if (n !== Buffer.byteLength(line) + 1) return set;\n  line = line.substr((n + ' ').length);\n  var kv = line.split('=');\n  var k = kv.shift().replace(/^SCHILY\\.(dev|ino|nlink)/, '$1');\n  if (!k) return set;\n  var v = kv.join('=');\n  set[k] = /^([A-Z]+\\.)?([mac]|birth|creation)time$/.test(k) ? new Date(v * 1000) : /^[0-9]+$/.test(v) ? +v : v;\n  return set;\n};\n\nmodule.exports = Pax;","map":{"version":3,"sources":["/Users/austenhughes/The-Baffoonery/node_modules/tar/lib/pax.js"],"names":["Header","require","path","Pax","obj","global","atime","charset","comment","ctime","gid","gname","linkpath","mtime","size","uid","uname","dev","ino","nlink","body","encodeBody","bodyLen","Buffer","byteLength","bufLen","Math","ceil","buf","allocUnsafe","i","basename","slice","mode","type","devmaj","devmin","encode","write","length","encodeField","field","undefined","v","Date","getTime","s","byteLen","digits","floor","log","pow","len","parse","string","ex","g","merge","parseKV","a","b","Object","keys","reduce","k","replace","split","parseKVLine","create","set","line","n","parseInt","substr","kv","shift","join","test","module","exports"],"mappings":"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","sourcesContent":["'use strict'\nconst Header = require('./header.js')\nconst path = require('path')\n\nclass Pax {\n  constructor (obj, global) {\n    this.atime = obj.atime || null\n    this.charset = obj.charset || null\n    this.comment = obj.comment || null\n    this.ctime = obj.ctime || null\n    this.gid = obj.gid || null\n    this.gname = obj.gname || null\n    this.linkpath = obj.linkpath || null\n    this.mtime = obj.mtime || null\n    this.path = obj.path || null\n    this.size = obj.size || null\n    this.uid = obj.uid || null\n    this.uname = obj.uname || null\n    this.dev = obj.dev || null\n    this.ino = obj.ino || null\n    this.nlink = obj.nlink || null\n    this.global = global || false\n  }\n\n  encode () {\n    const body = this.encodeBody()\n    if (body === '')\n      return null\n\n    const bodyLen = Buffer.byteLength(body)\n    // round up to 512 bytes\n    // add 512 for header\n    const bufLen = 512 * Math.ceil(1 + bodyLen / 512)\n    const buf = Buffer.allocUnsafe(bufLen)\n\n    // 0-fill the header section, it might not hit every field\n    for (let i = 0; i < 512; i++)\n      buf[i] = 0\n\n    new Header({\n      // XXX split the path\n      // then the path should be PaxHeader + basename, but less than 99,\n      // prepend with the dirname\n      path: ('PaxHeader/' + path.basename(this.path)).slice(0, 99),\n      mode: this.mode || 0o644,\n      uid: this.uid || null,\n      gid: this.gid || null,\n      size: bodyLen,\n      mtime: this.mtime || null,\n      type: this.global ? 'GlobalExtendedHeader' : 'ExtendedHeader',\n      linkpath: '',\n      uname: this.uname || '',\n      gname: this.gname || '',\n      devmaj: 0,\n      devmin: 0,\n      atime: this.atime || null,\n      ctime: this.ctime || null,\n    }).encode(buf)\n\n    buf.write(body, 512, bodyLen, 'utf8')\n\n    // null pad after the body\n    for (let i = bodyLen + 512; i < buf.length; i++)\n      buf[i] = 0\n\n    return buf\n  }\n\n  encodeBody () {\n    return (\n      this.encodeField('path') +\n      this.encodeField('ctime') +\n      this.encodeField('atime') +\n      this.encodeField('dev') +\n      this.encodeField('ino') +\n      this.encodeField('nlink') +\n      this.encodeField('charset') +\n      this.encodeField('comment') +\n      this.encodeField('gid') +\n      this.encodeField('gname') +\n      this.encodeField('linkpath') +\n      this.encodeField('mtime') +\n      this.encodeField('size') +\n      this.encodeField('uid') +\n      this.encodeField('uname')\n    )\n  }\n\n  encodeField (field) {\n    if (this[field] === null || this[field] === undefined)\n      return ''\n    const v = this[field] instanceof Date ? this[field].getTime() / 1000\n      : this[field]\n    const s = ' ' +\n      (field === 'dev' || field === 'ino' || field === 'nlink'\n        ? 'SCHILY.' : '') +\n      field + '=' + v + '\\n'\n    const byteLen = Buffer.byteLength(s)\n    // the digits includes the length of the digits in ascii base-10\n    // so if it's 9 characters, then adding 1 for the 9 makes it 10\n    // which makes it 11 chars.\n    let digits = Math.floor(Math.log(byteLen) / Math.log(10)) + 1\n    if (byteLen + digits >= Math.pow(10, digits))\n      digits += 1\n    const len = digits + byteLen\n    return len + s\n  }\n}\n\nPax.parse = (string, ex, g) => new Pax(merge(parseKV(string), ex), g)\n\nconst merge = (a, b) =>\n  b ? Object.keys(a).reduce((s, k) => (s[k] = a[k], s), b) : a\n\nconst parseKV = string =>\n  string\n    .replace(/\\n$/, '')\n    .split('\\n')\n    .reduce(parseKVLine, Object.create(null))\n\nconst parseKVLine = (set, line) => {\n  const n = parseInt(line, 10)\n\n  // XXX Values with \\n in them will fail this.\n  // Refactor to not be a naive line-by-line parse.\n  if (n !== Buffer.byteLength(line) + 1)\n    return set\n\n  line = line.substr((n + ' ').length)\n  const kv = line.split('=')\n  const k = kv.shift().replace(/^SCHILY\\.(dev|ino|nlink)/, '$1')\n  if (!k)\n    return set\n\n  const v = kv.join('=')\n  set[k] = /^([A-Z]+\\.)?([mac]|birth|creation)time$/.test(k)\n    ? new Date(v * 1000)\n    : /^[0-9]+$/.test(v) ? +v\n    : v\n  return set\n}\n\nmodule.exports = Pax\n"]},"metadata":{},"sourceType":"script"}